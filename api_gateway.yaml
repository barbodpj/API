swagger: "2.0"
info:
  description: This is a microservice that is the users' gateway to other microservices.
  version: "1.0.0"
  title: "API Gateway"
host: "127.0.0.1:80"
basePath: "/"
tags:
- name: "user"
  description: "Operations on users"
schemes:
- "http"
paths:
  /signup:
    post:
      tags:
      - "user"
      summary: "Sign new users up"
      consumes:
      - "application/json"
      produces:
      - "application/json"
      parameters:
      - in: "body"
        name: "body"
        required: true
        schema:
          type: object
          required:
            - username
            - password
            - isAdmin
          properties:
            username:
              type: string
            password:
              type: string
            email:
              type: string
            phone:
              type: string
            isAdmin:
              type: boolean
      responses:
        "201":
          description: "Created"
          schema:
            type: "object"
            properties:
              message:
                type: string
        '400':
          description: 'Bad request'
          schema:
            type: "object"
            properties:
              message:
                type: string
        "409":
          description: "User already exists"
          schema:
            type: "object"
            properties:
              message:
                type: string
  /login:
    post:
      tags:
      - "user"
      summary: "Login for users"
      consumes:
      - "application/json"
      produces:
      - "application/json"
      parameters:
      - in: "body"
        name: "body"
        required: true
        schema:
          type: object
          required:
            - username
            - password
          properties:
            username:
              type: string
            password:
              type: string
      responses:
        "200":
          description: "Ok"
          schema:
            type: "object"
            properties:
              message:
                type: string
              token:
                type: string
        '400':
          description: 'Bad request'
          schema:
            type: "object"
            properties:
              message:
                type: string
        "401":
          description: 'Unauthorized'
          schema:
            type: "object"
            properties:
              message:
                type: string
  /show_profile/{username}:
    get:
      tags:
      - "user"
      summary: "Return user information"
      produces:
      - "application/json"
      parameters:
        - in: path
          name: username
          type: string
          required: true
      responses:
        "200":
          description: "Ok"
          schema:
            type: "object"
            properties:
              username:
                type: string
              email:
                type: string
              phone:
                type: string
              isAdmin:
                type: boolean
        "401":
          description: 'Unauthorized'
          schema:
            type: "object"
            properties:
              message:
                type: string
        "404":
          description: "User not found"
          schema:
            type: "object"
            properties:
              message:
                type: "string"
      security:
        - Bearer: []
  /update_profile/{username}:
    post:
      tags:
      - "user"
      summary: "Modify user information"
      consumes:
      - "application/json"
      produces:
      - "application/json"
      parameters:
      - in: path
        name: 'username'
        type: string
        required: true
      - in: "body"
        name: "body"
        required: True
        schema:
          type: "object"
          properties:
            username:
              type: string
            password:
              type: string
            email:
              type: string
            phone:
              type: string
            isAdmin:
              type: boolean
      responses:
        "200":
          description: "Successful update"
          schema:
            type: "object"
            properties:
              message:
                type: "string"
        "400":
          description: "Bad request"
          schema:
            type: "object"
            properties:
              message:
                type: "string"
        "401":
          description: 'Unauthorized'
          schema:
            type: "object"
            properties:
              message:
                type: string
        "404":
          description: "User not found"
          schema:
            type: "object"
            properties:
              message:
                type: "string"
      security:
        - Bearer: []
  /show_clients:
    get:
      tags:
      - "user"
      summary: "Show list of clients to admin"
      consumes:
      - "application/json"
      produces:
      - "application/json"
      responses:
        "200":
          description: "Receive clients"
          schema:
            type: array
            items:
              $ref: "#/definitions/User"
        "401":
          description: 'Unauthorized'
          schema:
            type: "object"
            properties:
              message:
                type: string
        "403":
          description: "Only admins can view clients list"
          schema:
            type: "object"
            properties:
              message:
                type: string
  /books:
    get:
      tags:
      - "books"
      summary: "Show list of books with given parameters"
      consumes:
      - "application/json"
      produces:
      - "application/json"
      parameters:
      - in: query
        name: 'title'
        type: string
      - in: query
        name: 'category'
        type: string
      responses:
        "200":
          description: "Receive clients"
          schema:
            type: array
            items:
              $ref: "#/definitions/User"
        "401":
          description: 'Unauthorized'
          schema:
            type: "object"
            properties:
              message:
                type: string
  /books/create:
    post:
      tags:
      - "books"
      summary: Create a new book
      consumes:
      - "application/json"
      produces:
      - "application/json"
      parameters:
      - in: "body"
        name: "body"
        required: true
        schema:
          type: "object"
          properties:
            book_id:
              type: integer
            book_title:
              type: string
            book_category:
              type: string
            book_author:
              type: string
            book_price:
              type: integer
      responses:
        "201":
          description: "Created"
          schema:
            type: object
            properties:
              message:
                type: string
        "400":
          description: "Bad request"
          schema:
            type: object
            properties:
              message:
                type: string
        "401":
          description: 'Unauthorized'
          schema:
            type: "object"
            properties:
              message:
                type: string
        "403":
          description: 'Only admins can create books.'
          schema:
            type: "object"
            properties:
              message:
                type: string
        "409":
          description: "Book already exists"
          schema:
            type: object
            properties:
              message:
                type: string
      security:
        - Bearer: []
  /books/delete/{book_id}:
    put:
      tags:
      - "books"
      summary: Delete a book
      consumes:
      - "application/json"
      produces:
      - "application/json"
      parameters:
      - in: "path"
        name: "book_id"
        required: true
        type: integer

      responses:
        "200":
          description: "Deleted"
          schema:
            type: object
            properties:
              message:
                type: string
        "400":
          description: "Bad request"
          schema:
            type: object
            properties:
              message:
                type: string
        "401":
          description: 'Unauthorized'
          schema:
            type: "object"
            properties:
              message:
                type: string
        "403":
          description: 'Only admins can delete books.'
          schema:
            type: "object"
            properties:
              message:
                type: string
        "404":
          description: "Book not found"
          schema:
            type: object
            properties:
              message:
                type: string
      security:
        - Bearer: []
  /books/update/{book_id}:
    put:
      tags:
      - "books"
      summary: Update a book
      consumes:
      - "application/json"
      produces:
      - "application/json"
      parameters:
      - in: "path"
        name: "book_id"
        required: true
        type: integer
      - in: "body"
        name: "body"
        required: true
        schema:
          type: "object"
          properties:
            book_title:
              type: string
            book_category:
              type: string
            book_author:
              type: string
            book_price:
              type: integer
      responses:
        "200":
          description: "Updated"
          schema:
            type: object
            properties:
              message:
                type: string
        "400":
          description: "Bad request"
          schema:
            type: object
            properties:
              message:
                type: string
        "401":
          description: 'Unauthorized'
          schema:
            type: "object"
            properties:
              message:
                type: string
        "403":
          description: 'Only admins can update books.'
          schema:
            type: "object"
            properties:
              message:
                type: string
        "404":
          description: "Book not found"
          schema:
            type: object
            properties:
              message:
                type: string
      security:
        - Bearer: []
securityDefinitions:
  Bearer:
    type: apiKey
    name: x-access-token
    in: header
definitions:
  User:
      type: object
      required:
        - username
        - book_id
      properties:
        admin:
          type: string
        username:
          type: string
        hashed_passwd:
          type: string
        email:
          type: string
        phone:
          type: string
        isAdmin:
          type: boolean